{
  "schema": {
    "type": "service_blueprint",
    "version": {
      "major": 0,
      "minor": 1
    },
    "origin": "Engines Developer Studio 0.2"
  },
  "metadata": {
    "blueprint": {
      "version": {
        "major": 0,
        "minor": 0,
        "level": "rc",
        "patch": 0
      }
    },
    "software": {
      "display": {
        "title": "wap",
        "label": "wap"
      }
    },
    "timestamp": "2020-06-09T11:07:11+10:00"
  },
  "software": {
    "base": {
      "name": "wap",
      "publisher_namespace": "EnginesSystem",
      "type_path": "wap",
      "service_handle_field": "fqdn",
      "parent_image": "engines/servicebase",
      "deployment_type": "worker",
      "default_stop_timeout": 0,
      "restart_attempts": 0,
      "memory": {
        "required": 80,
        "recommended": 80
      },
      "run_as_user": "www-data",
      "user_id": "22005",
      "user_primary_group": "www-data",
      "create_user": "0"
    },
    "disposition": {
      "attach_post_build": true
    },
    "ports": [
      {
        "port": "8000",
        "external": "80",
        "protocol": "tcp"
      },
      {
        "port": "4430",
        "external": "443",
        "protocol": "tcp"
      }
    ],
    "scripts": {
      "start": {
        "content": "#!/bin/sh\r\n\r\nif ! test -d /var/log/nginx\r\n then\r\n  mkdir -p  /var/log/nginx\r\nfi\r\n\t\r\nPID_FILE=/home/engines/run/nginx.pid\r\nexport PID_FILE\r\n. /home/engines/functions/trap.sh\r\n\r\n/home/engines/scripts/engine/clear_broken.sh\r\n\r\n/usr/sbin/nginx &\r\n\r\nstartup_complete\r\n\r\nwait\r\nexit_code=$?\r\n\t\r\nshutdown_complete"
      },
      "install": {
        "content": "#!/bin/sh\r\n\r\nmkdir -p /var/lib/nginx /var/run/nginx/ \r\nchown www-data /var/lib/nginx /var/run/nginx/ /etc/nginx/sites-enabled \r\nmkdir -p /home/engines/scripts/configurators/saved/  /home/consumers/saved/\r\nchown www-data -R /etc/nginx/sites-enabled /home/engines/scripts/configurators/saved  /home/consumers/saved/"
      }
    },
    "system_packages": [
      {
        "package": "nginx"
      }
    ],
    "included_files": [
      {
        "source": "injections",
        "destination": "/",
        "owner": "root",
        "group": "www-data"
      }
    ],
    "consumers": {
      "accepts": [
        "ManagedEngine",
        "ManagedService"
      ]
    },
    "consumer_scripts": {
      "add": {
        "content": "#!/bin/sh\r\n\r\n . /home/engines/functions/checks.sh\r\n\r\nrequired_values=\"fqdn port proto parent_engine\"\r\ncheck_required_values\r\n\r\nres=`nslookup ${parent_engine}.engines.internal|grep -e \"Address: *[0-9]\" |awk '{print $2}'`\r\n `echo $res | grep -e \"[0-9].*\\.[0-9].*\\.[0-9].*\" >/dev/null`\r\n if test $? -ne 0\r\n  then  \t \r\n\techo '{\"status\":\"Error\",\"message\":\"failed to find internal dns entry for '${parent_engine}'.engines.internal\"}'\r\n\texit 127\r\n fi\r\n\t \r\ntemplate=\"/etc/nginx/templates/${proto}_site.tmpl\"\r\n\r\nresolv_ip=`nslookup control |grep -e \"Address: *[0-9]\" |awk '{print $2}'`\r\n\r\nservers=\"server SERVER.engines.internal:PORT;\"\r\ncnt=1\r\nif ! test -z $engine_count\r\n then\r\n \tif test $engine_count -gt 1\r\n \t then\r\n \t \twhile test $cnt -le  $engine_count\r\n \t \t\tdo\r\n \t \t\t    if test $cnt -ne 1\r\n \t \t\t\t  then\r\n \t \t\t\t\tn=$cnt \t \t   \r\n \t \t\t\t\tservers=\"$servers server SERVER$n.engines.internal:PORT;\"\r\n \t \t\t\tfi\r\n \t \t\t  cnt=`expr $cnt + 1 `\t\t\t\r\n \t \t\tdone \r\n \tfi\r\n fi\r\n \r\nif test $require_client_ssl = true\r\n then\r\n  ENABLE_SSLCA=\"\"\r\n  ssl_verify=on\r\n else\r\n  ssl_verify=off\r\n  ENABLE_SSLCA='#'\r\nfi\r\n\r\nif test -z $ca_name\r\n then\r\n   ca_file=system_CA.pem\r\n   crl_file=system_CA_CRL.pem\r\n else\r\n   ca_file=${ca_name}_CA.pem\r\n   crl_file=${ca_name}_CA_CRL.pem\r\nfi   \r\n  \r\ncat $template | sed \"/SERVERS/s//$servers/\" \\\r\n| sed \"/FQDN/s//$fqdn/g\" \\\r\n| sed \"/PORT/s//$port/g\"\\\r\n| sed \"/SERVER/s//$parent_engine/g\" \\\r\n| sed \"/ENABLE_SSLCA/s//$ENABLE_SSLCA/\" \\\r\n| sed \"/CA_FILE/s//$ca_file/\" \\\r\n| sed \"/SSLVERIFY/s//$ssl_verify/\"\\\r\n| sed \"/CRL_FILE/s//$crl_file/\" > /tmp/$fqdn.res\r\nwww_path=`echo $internal_dir  |sed \"s/^\\///\" |sed \"s/\\/$//\"`\r\n\r\n\r\nrewrite=\"\"\r\n   if ! test -z $www_path\r\n then\r\n    rewrite='rewrite \\^\\/'$www_path'\\/\\(\\.\\*\\) \\/'$www_path'\\/\\$1  break;\\\r\n        rewrite \\^\\/\\(\\.\\*\\) $fqdn\\/'$www_path'\\/\\$1  break; '\r\nfi\r\ncat /tmp/$fqdn.res | sed \"/FOLDER/s//$rewrite/\" >  /tmp/$fqdn.path\r\n\r\ndomain=`echo $fqdn  | cut -f2- -d.`\r\nif test \"$proto\" = default \r\n then\r\n    cp /tmp/site.name /etc/nginx/sites-enabled/default\r\n elif ! test \"$proto\" = http\r\n\t then\r\n\t \tif test -f /home/engines/etc/ssl/certs/${fqdn}.crt\r\n\t \t\tthen\r\n\t \t\t\tcert_name=${fqdn}\r\n\t \t\telif test -f /home/engines/etc/ssl/certs/${domain}.crt \r\n\t \t\t then\r\n\t \t\t \tcert_name=$domain\r\n\t \t\t elif test -f /home/engines/etc/ssl/certs/.${domain}.crt \r\n\t \t\t then\r\n\t \t\t \tcert_name=.$domain\t\r\n\t        else\r\n\t        cert_name=wap\r\n\t     fi\r\n\t\tif test -f /etc/nginx/sites-enabled/http_https_${fqdn}.site\r\n\t     \t\tthen\r\n\t     \t\t\trm -f /etc/nginx/sites-enabled/http_https_${fqdn}.site\r\n\t     \tfi\r\n\t\tif test -f /etc/nginx/sites-enabled/https_${fqdn}.site\r\n\t     \t\tthen\r\n\t     \t\t\trm -f /etc/nginx/sites-enabled/https_${fqdn}.site\r\n\t     \tfi\r\n\t     \tif test -f /etc/nginx/sites-enabled/http_${fqdn}.site\r\n\t     \t\tthen\r\n\t     \t\t\trm -f /etc/nginx/sites-enabled/http_${fqdn}.site\r\n\t     \tfi\r\n\t    cat /tmp/${fqdn}.path  | sed \"/CERTNAME/s//$cert_name/\" > /etc/nginx/sites-enabled/${proto}_${fqdn}.site\r\n\t else  #Proto is http\r\n\t\tif test -f /etc/nginx/sites-enabled/http_${fqdn}.site\r\n\t     \t\tthen\r\n\t     \t\t\trm -f /etc/nginx/sites-enabled/http_${fqdn}.site\r\n\t     \tfi\r\n\t\tif test -f /etc/nginx/sites-enabled/http_https_${fqdn}.site\r\n\t     \t\tthen\r\n\t     \t\t\trm -f /etc/nginx/sites-enabled/http_https_${fqdn}.site\r\n\t     \tfi\r\n\t\tif test -f /etc/nginx/sites-enabled/https_${fqdn}.site\r\n\t     \t\tthen\r\n\t     \t\t\trm -f /etc/nginx/sites-enabled/https_${fqdn}.site\r\n\t     \tfi\r\n\t \tcp /tmp/$fqdn.path /etc/nginx/sites-enabled/${proto}_${fqdn}.site\r\nfi\r\n\r\nmkdir -p /tmp/last_run\r\ncp \t/tmp/* /tmp/last_run\r\n\r\nrm /tmp/*\r\n\r\n\t if ! test -d /var/log/nginx/$fqdn/https/\r\n\t \tthen\r\n\t \t\tmkdir -p /var/log/nginx/$fqdn/https/\r\n\t \tfi\r\n \tif ! test -d /var/log/nginx/$fqdn/http/\r\n \tthen\r\n \t\tmkdir -p /var/log/nginx/$fqdn/http/\r\n \tfi\r\n nginx -s reload\t\r\n\t \r\necho '{\"status\":\"Sucess\"}'\r\nexit 0\r\n"
      }
    },
    "consumer_params": [
      {
        "name": "fqdn",
        "mandatory": true,
        "input": {
          "type": "string",
          "label": "Fqdn",
          "title": "www.mydomain.com"
        }
      },
      {
        "name": "proto",
        "value": "https",
        "mandatory": true,
        "input": {
          "type": "select",
          "collection": {
            "items": {
              "https": "HTTPS",
              "http": "HTTP",
              "https_http": "HTTPS and HTTP",
              "http_https": "HTTP and HTTPS"
            }
          }
        }
      },
      {
        "name": "port",
        "value": "8000",
        "mandatory": true,
        "input": {
          "type": "integer",
          "label": "port"
        }
      },
      {
        "name": "internal_dir",
        "value": "/",
        "input": {
          "type": "string",
          "label": "Internal dir"
        }
      },
      {
        "name": "public",
        "value": "true",
        "mandatory": true,
        "input": {
          "type": "checkbox_boolean",
          "label": "Publish beyond LAN"
        }
      },
      {
        "name": "engine_count",
        "value": "1",
        "mandatory": true,
        "input": {
          "type": "integer"
        }
      },
      {
        "name": "system_auth",
        "value": "false",
        "input": {
          "type": "checkbox_boolean",
          "label": "Use system auth via ldap"
        }
      },
      {
        "name": "auth_group",
        "value": "_Engines_Builder(engine_name)",
        "input": {
          "type": "string",
          "label": "Access group"
        }
      },
      {
        "name": "require_client_ssl",
        "value": "false",
        "input": {
          "type": "checkbox_boolean",
          "label": "Require client ssl cert"
        }
      },
      {
        "name": "ca_name",
        "input": {
          "type": "select_with_input",
          "label": "Signing CA Name",
          "collection": {
            "items": {
              "system": "System"
            }
          }
        }
      }
    ],
    "configurators": [
      {
        "name": "default_site",
        "label": "Default site",
        "variables": [
          {
            "name": "default_site",
            "mandatory": true,
            "input": {
              "type": "string",
              "label": "Default web site",
              "comment": "hostname only no http(s)"
            }
          }
        ],
        "set_script": {
          "language": "sh",
          "content": "#!/bin/sh\r\n\r\necho $default_site > /home/engines/scripts/configurators/saved/default_site\r\n\r\n . /home/engines/functions/checks.sh\r\nrequired_values=\"default_site\"\r\ncheck_required_values    \r\n  \r\nif test  ${#default_site} -gt 4\r\n then  \r\n  cat /etc/nginx/templates/default_site.tmpl | sed \"/FQDN/s//$default_site/\" > /tmp/site.fqdn\r\n  cp /tmp/site.fqdn /etc/nginx/sites-enabled/default\r\nelse\r\n  cp /etc/nginx/templates/empty_default /etc/nginx/sites-enabled/default \t\r\nfi\r\n\r\nkill -HUP `cat /home/engines/run/nginx.pid`\r\nexit 0\r\n"
        },
        "read_script": {
          "language": "sh",
          "content": "#!/bin/sh\r\n\r\nif test -f /home/engines/scripts/configurators/saved/default_site\r\n\tthen\r\n\t\tdefault_site=`cat /home/engines/scripts/configurators/saved/default_site`\r\n\t\techo '{\"default_site\":\"'$default_site'\"}'\r\n\telse\r\n\techo '{\"default_site\":\"Not Saved\"}'\r\n\r\nfi\r\n\r\nexit 0"
        }
      }
    ]
  }
}
